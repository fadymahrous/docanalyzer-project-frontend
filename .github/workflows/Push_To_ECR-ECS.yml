name: Deploy Django App to Amazon ECS after pushing image to ECR

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ vars.MY_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.MY_ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.MY_ECS_CLUSTER }}
  ECS_TASK_DEFINITION_PATH: .aws/bella_django_web.json
  CONTAINER_NAME: ${{ vars.MY_CONTAINER_NAME }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # pin this to a commit SHA for extra safety if you want

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure the ECR repository exists (create if missing)
      - name: Ensure ECR repository exists
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        # pin to a commit SHA in your repo

      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build -f Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker tag "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Render Amazon ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        # pin to a commit SHA in your repo
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_PATH }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Register the rendered task definition to get an ARN we can pass to create-service
      - name: Register task definition
        id: register-td
        run: |
          set -euo pipefail
          TD_JSON="${{ steps.task-def.outputs.task-definition }}"
          ARN=$(aws ecs register-task-definition --cli-input-json "file://$TD_JSON" \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$ARN" >> "$GITHUB_OUTPUT"


      - name: Create or update ECS service
        id: upsert-service
        env:
          TASK_DEF_ARN: ${{ steps.register-td.outputs.task_definition_arn }}
        run: |
          set -euo pipefail

          DESCRIBE_JSON=$(aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}")

          SERVICE_COUNT=$(echo "$DESCRIBE_JSON" | jq '.services | length')
          if [ "$SERVICE_COUNT" -gt 0 ] && [ "$(echo "$DESCRIBE_JSON" | jq -r '.services[0].status')" = "ACTIVE" ]; then
            echo "Service exists; updating to new task definition and scaling to 2."
            aws ecs update-service \
              --cluster "${{ env.ECS_CLUSTER }}" \
              --service "${{ env.ECS_SERVICE }}" \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 2 \
              --force-new-deployment >/dev/null
          else
            echo "Service not found; creating (EC2 + bridge) with desired-count 2."
            aws ecs create-service \
              --cluster "${{ env.ECS_CLUSTER }}" \
              --service-name "${{ env.ECS_SERVICE }}" \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 2 \
              --launch-type EC2 >/dev/null
          fi


      - name: Wait for service stability
        run: |
          set -euo pipefail
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"
          echo "Service is stable."
